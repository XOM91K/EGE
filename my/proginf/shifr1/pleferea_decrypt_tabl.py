plain_text = """ПОЛКОВОЙ_КОМАНДИР_БЫЛ_ПОЖИЛОЙ,_САНГВИНИЧЕСКИЙ,_С_СЕДЕЮЩИМИ_БРОВЯМИ
_И_БАКЕНБАРДАМИ_ГЕНЕРАЛ,_ПЛОТНЫЙ_И_ШИРОКИЙ_БОЛЬШЕ_ОТ_ГРУДИ_К_СПИНЕ
,_ЧЕМ_ОТ_ОДНОГО_ПЛЕЧА_К_ДРУГОМУ._НА_НЕМ_БЫЛ_НОВЫЙ,_С_ИГОЛОЧКИ,_СО_
СЛЕЖАВШИМИСЯ_СКЛАДКАМИ,_МУНДИР_И_ГУСТЫЕ_ЗОЛОТЫЕ_ЭПОЛЕТЫ,_КОТОРЫЕ_К
АК_БУДТО_НЕ_КНИЗУ,_А_КВЕРХУ_ПОДНИМАЛИ_ЕГО_ТУЧНЫЕ_ПЛЕЧИ._ПОЛКОВОЙ_К
ОМАНДИР_ИМЕЛ_ВИД_ЧЕЛОВЕКА,_СЧАСТЛИВО_СОВЕРШАЮЩЕГО_ОДНО_ИЗ_САМЫХ_ТО
РЖЕСТВЕННЫХ_ДЕЛ_ЖИЗНИ._ОН_ПОХАЖИВАЛ_ПЕРЕД_ФРОНТОМ_И,_ПОХАЖИВАЯ,_ПО
ДРАГИВАЛ_НА_КАЖДОМ_ШАГУ,_СЛЕГКА_ИЗГИБАЯСЬ_СПИНОЮ._"""
cypher = """Ы.КЭЫОР.КЖ.ИКПОГЁРИНШКЫ.ВТ,ЭОЪКВКПИСБЫМЕЬВВБОЪКВКВЬОЬ,БЩГЩКЩЭРЖЫГЩ
ВЩКЩСЖЗЫМКЭО.ЧЩВИЬЫЗ._ЪШАЁ,ЭБЯЯОВЩР_ЩОЭВТОКЩЭ,ЦЮЦВЙИСЩЙЦОГКЖКВЫМЫЗ
ШВЬЦЩАЙИВРЭФДИРВНХЦЬСКЖКОЭЬТ.ИЧЙКЁСКЫЗЩАИНШКЫЭОИОЪКВВЩИД,ЭЗАЕВКВРВ
КЮУВС_,ЩГЩЖФКВЭКС.ЖСГЩШВТЧФЭЩОВЩСЩЬЖИЯЦВЕЭ,ЭИЯЦВ.НЭ,УИИВКЖЙИРЭИ,КЖ
СЖКЩЬЙИЙКЁЦВЭББЕЕЪКСКЖО,.ШЦЖЫ.ЭФЩГКХЩВЬИРВУЪЗПИ,АЁ,ЗЕМРАЫ.КЭЫОР.КЖ
.ИКПОГЁРЩГЗ,К_ГОАЦЗ,ЫОЗВВХКВХ.ЖГ,БОЫКВЫОЦОХ_ШГЬИРВРОЫЭВЩЦКВСИПШАИЙ
Й_ЬВИЖЗЫЯЁШАОЬШКВТЛБМОВРЁКЫ.А.ВТ_СШКЫЧОЦРСЁДЭЫИЙЩАЕВАЁ.,САЕОЖПШВЫ.
ОЭСМЕОКХКЁСКЖССЙ.ИР_СМЕЪКВ,ЗБССКБЕИЩМКФЖЦСАФБЫД,РА"""
print(plain_text)
# 1) Уберём переводы строк
plain_text = plain_text.replace("\n", "")
cypher = cypher.replace("\n", "")

# 2) Выровняем длину и сделаем её чётной
L = min(len(plain_text), len(cypher))
if L % 2:
    L -= 1
plain_text = plain_text[:L]
cypher = cypher[:L]

# 3) Построим списки биграмм
bi_plain = [plain_text[i:i+2] for i in range(0, L, 2)]
bi_cip   = [cypher[i:i+2]     for i in range(0, L, 2)]

print(len(bi_plain))
print(len(bi_cip))

sames = {}

for pbg, cbg in zip(bi_plain, bi_cip):
    # обе биграммы гарантированно длины 2
    p0, p1 = pbg[0], pbg[1]
    c0, c1 = cbg[0], cbg[1]

    # Совпадает хотя бы одна буква из открытого текста с любой из букв шифр-биграммы,
    # либо обе биграммы — «дубли» (оба символа одинаковые)
    if (p0 in cbg) or (p1 in cbg) or ((p0 == p1) and (c0 == c1)):
        sames[pbg] = cbg

print(sames)
print(len(sames))
