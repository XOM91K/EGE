import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

from config import BOT_TOKEN
from database import db
from keyboards import main_menu, recipe_navigation
from utils import format_recipe_message, get_meal_type_name

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¶–∏—Ñ—Ä–æ–≤—É—é –∫–Ω–∏–≥—É —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è!

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:
‚Ä¢ üç≥ –ó–∞–≤—Ç—Ä–∞–∫ - –ª–µ–≥–∫–∏–µ –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞
‚Ä¢ üç≤ –û–±–µ–¥ - —Å—ã—Ç–Ω—ã–µ –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã  
‚Ä¢ üçΩÔ∏è –£–∂–∏–Ω - –ª–µ–≥–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã

–ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ! üëá
    """

    await update.message.reply_text(welcome_text, reply_markup=main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.message.chat_id

    if text == "üç≥ –ó–∞–≤—Ç—Ä–∞–∫":
        await show_recipes(update, context, 'breakfast', 0)
    elif text == "üç≤ –û–±–µ–¥":
        await show_recipes(update, context, 'lunch', 0)
    elif text == "üçΩÔ∏è –£–∂–∏–Ω":
        await show_recipes(update, context, 'dinner', 0)
    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        about_text = """
üìö –¶–∏—Ñ—Ä–æ–≤–∞—è –∫–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ª—é–±–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
‚Ä¢ –£–∑–Ω–∞—Ç—å –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –±–ª—é–¥
‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –∑–¥–æ—Ä–æ–≤—ã–º –ø–∏—Ç–∞–Ω–∏–µ–º

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏!
        """
        await update.message.reply_text(about_text, reply_markup=main_menu())
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üëá", reply_markup=main_menu())


# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç
async def show_recipes(update: Update, context: ContextTypes.DEFAULT_TYPE, meal_type: str, index: int):
    recipe = db.get_recipe(meal_type, index)

    if not recipe:
        await update.message.reply_text("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = format_recipe_message(recipe)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        with open(recipe['image'], 'rb') as photo:
            if isinstance(update, Update) and update.message:
                sent_message = await update.message.reply_photo(
                    photo=photo,
                    caption=message,
                    parse_mode='Markdown',
                    reply_markup=recipe_navigation(index, db.get_total_recipes(meal_type), meal_type)
                )
            else:
                # –î–ª—è callback queries
                await update.callback_query.message.reply_photo(
                    photo=photo,
                    caption=message,
                    parse_mode='Markdown',
                    reply_markup=recipe_navigation(index, db.get_total_recipes(meal_type), meal_type)
                )
    except FileNotFoundError:
        if isinstance(update, Update) and update.message:
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=recipe_navigation(index, db.get_total_recipes(meal_type), meal_type)
            )
        else:
            await update.callback_query.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=recipe_navigation(index, db.get_total_recipes(meal_type), meal_type)
            )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "main_menu":
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:", reply_markup=main_menu())
    elif data.startswith("recipe_"):
        # –§–æ—Ä–º–∞—Ç: recipe_{meal_type}_{index}
        parts = data.split("_")
        if len(parts) == 3:
            meal_type = parts[1]
            index = int(parts[2])
            await show_recipes(update, context, meal_type, index)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()