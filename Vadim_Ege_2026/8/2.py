def xor_decrypt(data, key):
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é XOR —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º"""
    return bytes([b ^ key for b in data])


def is_printable(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—á–∞—Ç–Ω—ã—Ö ASCII —Å–∏–º–≤–æ–ª–æ–≤"""
    return all(32 <= byte <= 126 or byte in [9, 10, 13] for byte in text)


def main():
    # –ß–∏—Ç–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('flag.enc', 'rb') as f:
        encrypted_data = f.read()

    print(f"–†–∞–∑–º–µ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(encrypted_data)} –±–∞–π—Ç")
    print(f"–ü–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç: {encrypted_data[:20]}")

    # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ (0-255)
    possible_flags = []

    for key in range(256):
        decrypted = xor_decrypt(encrypted_data, key)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–ª–∞–≥
        if is_printable(decrypted):
            try:
                decoded_text = decrypted.decode('utf-8')
                # –ò—â–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–ª–∞–≥–æ–≤
                if any(flag_marker in decoded_text for flag_marker in ['flag{', 'CTF{', 'FLAG{']):
                    print(f"üéâ –í–û–ó–ú–û–ñ–ù–´–ô –§–õ–ê–ì —Å –∫–ª—é—á–æ–º {key}: {decoded_text}")
                    possible_flags.append((key, decoded_text))
                elif len(decoded_text) > 10:  # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –≤—Å–µ —á–∏—Ç–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    print(f"–ö–ª—é—á {key:3d}: {decoded_text[:50]}...")
            except UnicodeDecodeError:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ UTF-8 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                pass

    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–ª–∞–≥–∏
    print("\n" + "=" * 50)
    print("–í–û–ó–ú–û–ñ–ù–´–ï –§–õ–ê–ì–ò:")
    for key, flag in possible_flags:
        print(f"–ö–ª—é—á {key}: {flag}")

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —è–≤–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤, –ø–æ–∫–∞–∂–µ–º –≤—Å–µ —á–∏—Ç–∞–µ–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if not possible_flags:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —è–≤–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ —á–∏—Ç–∞–µ–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
        for key in range(256):
            decrypted = xor_decrypt(encrypted_data, key)
            if is_printable(decrypted):
                try:
                    decoded_text = decrypted.decode('utf-8')
                    print(f"–ö–ª—é—á {key:3d}: {decoded_text}")
                except:
                    pass


if __name__ == "__main__":
    main()